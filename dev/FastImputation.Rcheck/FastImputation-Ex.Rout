
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "FastImputation"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "FastImputation-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('FastImputation')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BoundNormalizedVariable")
> ### * BoundNormalizedVariable
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BoundNormalizedVariable
> ### Title: Take a normalized variable and transform it back to a bounded
> ###   variable.
> ### Aliases: BoundNormalizedVariable
> 
> ### ** Examples
> 
>   constraints=list(lower=5)           # lower bound when constrining to an interval
>   constraints=list(upper=10)          # upper bound when constraining to an interval
>   constraints=list(lower=5, upper=10) # both lower and upper bounds
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BoundNormalizedVariable", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FastImputation")
> ### * FastImputation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FastImputation
> ### Title: Use the pattern learned from the training data to impute (fill
> ###   in good guesses for) missing values.
> ### Aliases: FastImputation
> 
> ### ** Examples
> 
> data(FI_train)   # provides FItrain dataset
> patterns <- TrainFastImputation(
+   FI_train,
+   constraints=list(list(2, list(lower=0)),           # continuous var with lower bound
+                    list(5, list(upper=0)),           # continuous var with only upper bound
+                    list(6, list(lower=0, upper=1))   # bounded to a finite interval
+                    ),
+   idvars=1,  # user ids; also used for any variable not to be imputed
+   categorical=9)
Error in TrainFastImputation(FI_train, constraints = list(list(2, list(lower = 0)),  : 
  This covariance matrix is ill-conditioned.  Perhaps you don't have enough data or some columns are redundant.
Execution halted
